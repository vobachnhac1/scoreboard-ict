const DBChampionAthleteService = require('../services/common/db_champion_athlete');
const dbChampionGrpEventService = require('../services/common/db_champion_grp_event');
const dbAthMatchService = require('../services/common/db_champion_athlete_match');

const BracketService = require('../services/bracket.service');

class AthleteController {
   
    //#region Bracket 

        // 1.1 Ki·ªÉm tra s·ªë l∆∞·ª£ng v·∫≠n ƒë·ªông vi√™n ƒë∆∞·ª£c mi·ªÖn  
        async handleNumPlayerBye (req, res){
            try {
                const {players} = req.query;
                const num_bye_needed = BracketService.checkByeNeeded(players)
                res.status(200).json({
                    success: true,
                    message: "Th·ª±c hi·ªán th√†nh c√¥ng",
                    data: {
                        num_bye_needed: num_bye_needed,
                        num_player: Number(players)
                    }
                });
            } catch (error) {
                res.status(500).json({success: false, message: 'L·ªói ki·ªÉm tra VƒêV ƒë∆∞·ª£c mi·ªÖn', error: error.message });
            }
        }  

        // 1.2. T·∫°o l·ªãch thi ƒë·∫•u theo n·ªôi dung thi
        async randomBracket(req, res){
            const {champ_grp_event_id, list_bye} = req.query
            if(!champ_grp_event_id){
                res.status(400).json({
                    success: false,
                    message: "Thi·∫øu n·ªôi dung thi",
                });
                return
            }
            const ls_champ_grp_event = await dbChampionGrpEventService.getEventById(champ_grp_event_id)
            if(!ls_champ_grp_event){
                res.status(400).json({
                    success: false,
                    message: "Ch·ª©c nƒÉng kh√¥ng ph√π h·ª£p v·ªõi n·ªôi dung thi",
                });
                return
            }
            // L·∫•y danh s√°ch v·∫≠n ƒë·ªông vi√™n
            let ls_athlete = await DBChampionAthleteService.selectByChampGrpEventId(champ_grp_event_id);

            // n·∫øu ch∆∞a c√≥ k·∫øt qu·∫£ b·ªëc thƒÉm m√† mu·ªën random
            if(ls_athlete.filter(ele=> ele.num_random == '0').length > 0){
                ls_athlete = ls_athlete.map((ele,index)=>({...ele, num_random: index+1}) )
            }

            // S·∫Øp x·∫øp theo th·ª©c t·ª± nh·ªè -> l·ªõn
            let ls_sort = ls_athlete.sort((a, b) => a?.num_random.toString().toLowerCase()   > b?.num_random.toString().toLowerCase() ? 1 : -1);
            let ls_ids = ls_sort.map(ele=>ele.id)

            const ls_byes = list_bye?.split(',').filter(ele=> ele) ?? []
            let data = BracketService.generateKnockoutBracket(ls_ids, ls_byes);
            // console.log('data: ', data);

            // üßæ Log s∆° ƒë·ªì ƒë·∫•u
            let num = 0;

            // data.forEach((round, roundIndex) => {
            //     console.log(`\nüîπ V√≤ng ${roundIndex + 1}:`);
            //     if(round.round == 1){
            //         round.right.forEach((match, idx) => {
            //             if(!match.value.includes('BYE')){
            //                 num++
            //                 console.log(`  Tr·∫≠n ${num} | id ${match.match_id}: ${match.value[0]} vs ${match.value[1]}`);
            //             }
            //         });
            //         round.left.forEach((match, idx) => {
            //             if(!match.value.includes('BYE')){
            //                 num++
            //                 console.log(` Tr·∫≠n ${num} | id ${match.match_id}: ${match.value[0]} vs ${match.value[1]}`);
            //             }
            //         }); 
            //     }else{
            //         round.matches.forEach(match=>{
            //             if(!match.value.includes('BYE')){
            //                 num++
            //                 console.log(`Tr·∫≠n ${num} | id ${match.match_id}: ${match.value[0]} vs ${match.value[1]}`);
            //             }
            //         })
            //     }
            // });

            //L·∫∑p s·ªë v√≤ng ƒë·∫•u
            // let ls_round =[]
            let ls_total = []

            for(let i =0; i < data.length; i++){
                // let ls_final =[]
                const round = data[i]
                if(i==0){
                    // id ƒë·ªÉ map m·ªõi tr·∫≠n sau:  id | parent_id 
                    const arrRound1 = [...round.right,...round.left];
                    for(let j =0; j< arrRound1.length; j++){
                        if(!arrRound1[j].value.includes('BYE')){
                            const item = {
                                ...arrRound1[j],
                                match_id: arrRound1[j].match_id,
                                round: round.round,
                                match_no: ls_total.length +1,
                                value: arrRound1[j].value
                            }
                            ls_total.push(item)
                            // ls_final.push(item)
                        }
                    }                    
                }else{
                    const arrMatch= round.matches;
                    for(let j=0; j < arrMatch.length; j++){                        
                        const item = {
                            ...arrMatch[j],
                            match_id: arrMatch[j].match_id,
                            round: round.round,
                            match_no: ls_total.length +1,
                            value: arrMatch[j].value
                        }
                        ls_total.push(item)                        
                        // ls_final.push(item)                        
                    }
                }
                // ls_round.push({
                //     round: round.round,
                //     data: ls_final
                // })
            }
 
            // l∆∞u v√†o table danh s√°ch l∆∞u table  ls_total
            // ID | CHAMP_GRP_EVENT_ID | ID_VDV_DO | ID_VDV_XANH | VDV_WIN | CREATED_AT | UPDATED_AT;
            let list_insert = ls_total.map(ele=>{
                return {
                    champ_grp_event_id: champ_grp_event_id,
                    round: ele.round,
                    match_id: ele.match_id,
                    match_no: ele.match_no,
                    ath_red_id:  ele.ath_red,
                    ath_blue_id:  ele.ath_blue,
                }
            });

            const remove = await dbAthMatchService.deleteByChampGrpEventId(champ_grp_event_id)
            const insert = await dbAthMatchService.insertList(list_insert);

            res.status(200).json({
                success: true,
                message: "Th·ª±c hi·ªán th√†nh c√¥ng",
                data: {
                    num_round : data.length,
                    num_match: list_insert.length,
                    num_member: ls_athlete.length,
                    list_insert: list_insert
                },
            }); 
        }

    //#endregion


    //#region  M√†n H√¨nh B·ªëc thƒÉm 

        // Create a new athlete
        async create(req, res) {
            try {
                const { fullname, dob, team_id, team_name, gender_id, champ_grp_event_id, cham_grp_id, champ_id, num_random } = req.body;
                if ( !champ_grp_event_id|| !gender_id|| !cham_grp_id|| !champ_id) {
                    return res.status(400).json({
                        success: false,
                        message: "Th√¥ng tin kh√¥ng ch√≠nh x√°c",
                        data: {}
                    });
                }
                const id = await DBChampionAthleteService.insert({
                    fullname,
                    dob,
                    team_id,
                    team_name,
                    gender_id,
                    champ_grp_event_id,
                    cham_grp_id,
                    champ_id,
                    num_random
                });
                res.status(201).json({success: true, message: 'Th√™m VƒêV th√†nh c√¥ng', data: id });
            } catch (error) {
                res.status(500).json({success: false, message: 'Error creating athlete', error: error.message });
            }
        }

        // Update an existing athlete
        async update(req, res) {
            try {
                const { id } = req.params;
                const { fullname, dob, team_id, team_name, gender_id, champ_grp_event_id, cham_grp_id, champ_id, num_random } = req.body;
                if (!id || !champ_grp_event_id|| !gender_id|| !cham_grp_id|| !champ_id) {
                    return res.status(400).json({
                        success: false,
                        message: "Th√¥ng tin kh√¥ng ch√≠nh x√°c",
                        data: {}
                    });
                }
                const changes = await DBChampionAthleteService.update(id, {
                    fullname,
                    dob,
                    team_id,
                    team_name,
                    gender_id,
                    champ_grp_event_id,
                    cham_grp_id,
                    champ_id,
                    num_random
                });
                if (changes > 0) {
                    res.status(200).json({ success: true, message: 'C·∫≠p nh·∫≠t th√¥ng tin VƒêV th√†nh c√¥ng' });
                } else {
                    res.status(404).json({success: false, message: 'Th·ª±c hi·ªán th·∫•t b·∫°i' });
                }
            } catch (error) {
                res.status(500).json({success: false, message: 'L·ªói: API c·∫≠p nh·∫≠t VƒêV', error: error.message });
            }
        }
        
        // Delete an athlete
        async delete(req, res) {
            try {
                const { id } = req.params;
                if (!id) {
                    return res.status(400).json({
                        success: false,
                        message: "Th√¥ng tin kh√¥ng ch√≠nh x√°c",
                        data: {}
                    });
                }
                const changes = await DBChampionAthleteService.delete(id);
                if (changes > 0) {
                    res.status(200).json({ success: true,message: 'Th·ª±c hi·ªán xo√° th√†nh c√¥ng' });
                } else {
                    res.status(404).json({ success: false,message: 'Th·ª±c hi·ªán th·∫•t b·∫°i' });
                }
            } catch (error) {
                res.status(500).json({ success: false, message: 'L·ªói: API xo√° VƒêV', error: error.message });
            }
        }

        // Get all athletes
        async getAll(req, res) {
            try {
                const athletes = await DBChampionAthleteService.selectAll();
                res.status(200).json({
                    success: true,
                    message: "Th·ª±c hi·ªán th√†nh c√¥ng",
                    data: athletes
                });
            } catch (error) {
                res.status(500).json({ message: 'Error fetching athletes', error: error.message });
            }
        }

        // Get athletes by champ_grp_event_id
        async getByChampGrpEventId(req, res) {
            try {
                const { champ_grp_event_id } = req.params;
                if (!champ_grp_event_id) {
                    return res.status(400).json({
                        success: false,
                        message: "D·ªØ li·ªáu t√¨m ki·∫øm kh√¥ng ch√≠nh x√°c.",
                        data: {}
                    });
                }
                const athletes = await DBChampionAthleteService.selectByChampGrpEventId(champ_grp_event_id);
                res.status(200).json({
                    success: true,
                    message: "Th·ª±c hi·ªán th√†nh c√¥ng",
                    data: athletes
                });
            } catch (error) {
                res.status(500).json({ message: 'Error fetching athletes', error: error.message });
            }
        }

        // Get athletes by champ_id
        async getByChampId(req, res) {
            try {
                const { champ_id, champ_grp_event_id } = req.query;
                if (!champ_id && !champ_grp_event_id) {
                    return res.status(400).json({
                        success: false,
                        message: "Thi·∫øu m√£ gi·∫£i ƒë·∫•u.",
                        data: {}
                    });
                }
                let athletes =[]
                if(champ_id){
                    athletes = await DBChampionAthleteService.selectAllByChampId(champ_id, champ_grp_event_id)
                }else if(champ_grp_event_id){
                    athletes = await DBChampionAthleteService.selectByChampGrpEventId(champ_grp_event_id)
                }

                res.status(200).json({
                    success: true,
                    message: "Th·ª±c hi·ªán th√†nh c√¥ng",
                    data: athletes
                });
            } catch (error) {
                res.status(500).json({ message: 'Error fetching athletes', error: error.message });
            }
        }

        async updateRandom(req, res) {
            try {
                const { id } = req.params;
                const { num_random } = req.body;
                if (!id || !num_random ) {
                    return res.status(400).json({
                        success: false,
                        message: "Th√¥ng tin kh√¥ng ch√≠nh x√°c",
                        data: {}
                    });
                }
                const changes = await DBChampionAthleteService.updateRandom(id, num_random);
                if (changes > 0) {
                    res.status(200).json({ success: true, message: 'C·∫≠p nh·∫≠t th√¥ng tin VƒêV th√†nh c√¥ng' });
                } else {
                    res.status(404).json({success: false, message: 'Th·ª±c hi·ªán th·∫•t b·∫°i' });
                }
            } catch (error) {
                res.status(500).json({success: false, message: 'L·ªói: API c·∫≠p nh·∫≠t VƒêV', error: error.message });
            }
        }
    //#endregion


    //#region Tr·∫≠n ƒë·∫•u | Match
        async updateAthMatch(req, res){
            try {
                const {champ_grp_event_id} = req.query;
                const {match_id, ath_win_id, ath_match_id} = req.body;
                if( !champ_grp_event_id || !match_id || !ath_win_id || !ath_match_id){
                    res.status(404).json({
                        success: false,
                        message: "Tham s·ªë truy·ªÅn kh√¥ng ƒë√∫ng",
                        data: {}
                    });
                    return;
                }
                // Goi h√†m c·∫∑p nh·∫≠t
                const result_upd_win  = await dbAthMatchService.updateAthWinner(ath_match_id, {ath_win_id: ath_win_id})
                if(!result_upd_win){
                    res.status(400).json({
                        success: false,
                        message: "Th·ª±c hi·ªán l·ªói",
                        data: {}
                    });
                    return;
                }
                // G·ªçi h√†m update tr·∫≠n ti·∫øp theo n·∫øu matchid n·∫±m trong v·ªã tr√≠ ath_red | ath_blue
                const record = await dbAthMatchService.findNextMatchId(match_id)
                if(!record){
                    res.status(200).json({
                        success: true,
                        message: "[AM01] L∆∞u k·∫øt qu·∫£ th√†nh c√¥ng. Kh√¥ng c√≥ tr·∫≠n k·∫ø ti·∫øp",
                    });
                    return;
                }
                // g·ªçi h√†m c·∫∑p nh·∫≠t
                const record_upd = {
                    id: record.id,
                    ath_red_id: record.ath_red_id == match_id ?  ath_win_id : record.ath_red_id,
                    ath_blue_id: record.ath_blue_id == match_id ?  ath_win_id : record.ath_blue_id,
                }   
                const result_upd_match = await dbAthMatchService.updateNextMatchId(record.id,record_upd)
                if(!result_upd_match){
                    res.status(200).json({
                        success: true,
                        message: "[AM02] L∆∞u k·∫øt qu·∫£ th√†nh c√¥ng. L·ªói th·ª±c hi·ªán c·∫≠p nh·∫≠t th√¥ng tin tr·∫≠n k·∫ø ti·∫øp",
                    });
                    return;
                }
                res.status(200).json({
                    success: true,
                    message: "Th·ª±c hi·ªán th√†nh c√¥ng",
                });
            } catch (error) {
                res.status(500).json({success: false, message: 'L·ªói API c·∫≠p nh·∫≠t tr·∫≠n ƒë·∫•u k·∫ø ti·∫øp', error: error.message });
            }
        }

        async getAthMatch(req, res){
            try {
                const {champ_grp_event_id} = req.query;
                if( !champ_grp_event_id ){
                    res.status(404).json({
                        success: false,
                        message: "Tham s·ªë truy·ªÅn kh√¥ng ƒë√∫ng",
                        data: {}
                    });
                    return;
                }
                const list  = await dbAthMatchService.findByChampGrpEventId(champ_grp_event_id)
                res.status(200).json({
                    success: true,
                    message: "Th·ª±c hi·ªán th√†nh c√¥ng",
                    data: list
                });
            } catch (error) {
                res.status(500).json({success: false, message: 'L·ªói API l·∫•y tr·∫≠n ƒë·∫•u theo n·ªôi dung thi', error: error.message });
            }
        }
        // 
        // 
        /**
         * 1. B·∫Øt ƒë·∫ßu tr·∫≠n ƒë·∫•u -> B·∫•m "V√†o tr·∫≠n"
         * 
         *  DB_MATCH_HIS 
         *  - ID | 
         *      MATCH_ID |                   - m√£ tr·∫≠n ƒë·∫•u
         *      RED_SCORE | BLUE_SCORE |     - ƒëi·ªÉm t·ªïng
         *      RED_REMIND | BLUE_REMIND |   - s·ªë l·∫ßn nh·∫Øc nh·ªü
         *      RED_WARN | BLUE_WARN |       - s·ªë l·∫ßn c·∫£nh c√°o
         *      RED_MINS | BLUE_MINS |       - ƒëi·ªÉm tr·ª´
         *      RED_INCR | BLUE_INCR |       - ƒëi·ªÉm c·ªông
         *      ROUND |                      - Hi·ªáp s·ªë 
         *      ROUND_TYPE |                 - Lo·∫°i hi·ªáp 
         *      CONFIRM_ATTACK |             - S·ªë l·∫ßn c√¥ng nh·∫≠n ƒë√≤n t·∫•n c√¥ng 
         *      STATUS |                     - Tr·∫°ng th√°i
         * 
         *  DB_MATCH_CONFIG: th√¥ng s·ªë √°p d·ª•ng c·ªßa tr·∫≠n thi ƒë·∫•u
         *      - ID:
         *      MATCH_ID
         *      CHAMP_ID
         *      CHAMP_GRP_ID
         *      CHAMP_GRP_EVENT_ID
         *      CONFIG: C·∫§U H√åNH L∆ØU D·∫†NG STRING -> JSON 
         *      
         *  DB_MATCH_LOG: L∆∞u l·∫°i nh·ªØng thao t√°c c·ªßa t·∫•t c·∫£ Tr·ªçng t√†i m√°y | Gi√°m ƒë·ªãnh 
         * 
         * 
         *  DB_BIENBAN: Khi tr·∫≠n ƒë·∫•u k·∫øt th√∫c ho·∫∑c tuy·∫øn b·ªë th·∫Øng cu·ªôc -> L∆∞u bi√™n b·∫£n  
         * 
         */

    //#endregion

}

let instances = new AthleteController();
module.exports = instances;